services:

  keycloak-mysql:
    container_name: 'keycloak-mysql'
    image: mysql:8.0.25
    environment:
      - 'MYSQL_ROOT_PASSWORD: ms@f1r!'
      - 'MYSQL_DATABASE: keycloak'
      - 'MYSQL_USER: keycloak'
      - 'MYSQL_PASSWORD: keycloak'
    volumes:
      - './keycloak-mysql/:/var/lib/mysql'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    restart: unless-stopped

  keycloak:
    container_name: 'keycloak'
    image: 'quay.io/keycloak/keycloak:22.0.1'
    ports:
      - '8181:8080'
    environment:
      - 'DB_VENDOR: MYSQL'
      - 'DB_ADDR: mysql'
      - 'DB_DATABASE: keycloak'
      - 'DB_USER: keycloak'
      - 'DB_PASSWORD: keycloak'
      - 'KEYCLOAK_ADMIN: admin'
      - 'KEYCLOAK_ADMIN_PASSWORD: admin'
    command: ['start-dev', '--import-realm']
    volumes:
      - './keycloak-realms/:/opt/keycloak/data/import/'
    depends_on:
        - 'keycloak-mysql'

  postgres-order-service:
    container_name: 'order-service-db'
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB: msafiri-order-service'
      - 'POSTGRES_USER: msafiri'
      - 'POSTGRES_PASSWORD: ms@f1r!'
      - 'PGDATA: /data/postgres'
    volumes:
      - './order-service-db/:/data/postgres'
    ports:
      - '5431:5431'
    expose:
      - '5431'
    command: -p 5431
    restart: unless-stopped

  postgres-inventory-service:
    container_name: 'order-inventory-db'
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB: msafiri-inventory-service'
      - 'POSTGRES_USER: msafiri'
      - 'POSTGRES_PASSWORD: ms@f1r!'
      - 'PGDATA: /data/postgres'
    volumes:
      - './order-inventory-db/:/data/postgres'
    ports:
      - '5432:5432'
    expose:
      - '5432'
    restart: unless-stopped

  mongodb:
    container_name: 'mongodb'
    image: 'mongo:latest'
    environment:
      - 'MONGO_INITDB_ROOT_USERNAME: root'
      - 'MONGO_INITDB_ROOT_PASSWORD: root'
    ports:
      - '27017:27017'
    hostname: 'localhost'
    volumes:
      - 'mongodb:/data/db'
    restart: unless-stopped

  zipkin:
    image: 'openzipkin/zipkin'
    container_name: 'zipkin'
    ports:
      - '9411:9411'

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.4.1
    hostname: 'broker'
    container_name: 'broker'
    depends_on:
      - 'zookeeper'
    ports:
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'



#  Eureka-server
  discovery-server:
    container_name: 'discovery-server'
    image: 'g700/discovery-server:latest'
    ports:
      - '8761:8761'
    environment:
      - 'SPRING_PROFILES_ACTIVE: docker'
    depends_on:
      - 'zipkin'
    restart: unless-stopped

# API Gateway
  api-gateway:
    container_name: 'api-gateway'
    image: 'g700/api-gateway:latest'
    ports:
      - '8082:8080'
    expose:
      - '8082'
    environment:
      - 'SPRING_PROFILES_ACTIVE: docker'
      - 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: TRACES'
    depends_on:
      - 'zipkin'
      - 'keycloak'
      - 'discovery-server'

# product service
  product-service:
      container_name: 'product-service'
      image: 'g700/product-service:latest'
      environment:
      - 'SPRING_PROFILES_ACTIVE: docker'
      - 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: TRACES'
      depends_on:
      - 'zipkin'
      - 'discovery-server'
      - 'mongodb'
      - 'api-gateway'

# order service
  order-service:
      container_name: 'order-service'
      image: 'g700/order-service:latest'
      environment:
      - 'SPRING_PROFILES_ACTIVE: docker'
      - 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: TRACES'
      - 'SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order-service:5431/msafiri-order-service'
      depends_on:
      - 'zipkin'
      - 'discovery-server'
      - 'api-gateway'
      - 'broker'
      - 'postgres-order-service'

# inventory service
  inventory-service:
      container_name: 'inventory-service'
      image: 'g700/inventory-service:latest'
      environment:
      - 'SPRING_PROFILES_ACTIVE: docker'
      - 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: TRACES'
      - 'SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-inventory-service:5432/msafiri-inventory-service'
      depends_on:
      - 'discovery-server'
      - 'api-gateway'
      - 'postgres-inventory-service'

# notification service
  notification-service:
      container_name: 'notification-service'
      image: 'g700/notification-service:latest'
      environment:
      - 'SPRING_PROFILES_ACTIVE: docker'
      - 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: TRACES'
      depends_on:
      - 'discovery-server'
      - 'api-gateway'
      - 'broker'
      - "zipkin"


# ------- API Health Check -----------

# prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - order-service
      - product-service
      - inventory-service
      - notification-service
      - api-gateway
      - discovery-server
    restart: unless-stopped
# grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    volumes:
      - ./grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

